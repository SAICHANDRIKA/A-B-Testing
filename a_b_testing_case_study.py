# -*- coding: utf-8 -*-
"""A/B Testing: Case Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UWYyNhNipXd9ovLVZXUcppC_Q9fvQfeI

Dataset Obtained : https://www.kaggle.com/datasets/ilkeryildiz/example-dataset-for-ab-test

A/B testing helps in finding a better approach to finding customers, marketing products, getting a higher reach, or anything that helps a business convert most of its target customers into actual customers. A/B Testing means analyzing two marketing strategies to choose the best marketing strategy that can convert more traffic into sales (or more traffic into your desired goal) effectively and efficiently.

**About Dataset**

1. Campaign Name: The name of the campaign
2. Date: Date of the record
3. Spend: Amount spent on the campaign in dollars
4. Number of Impressions: Number of impressions the ad crossed through the campaign
5. Reach: The number of unique impressions received in the ad
6. Number of Website Clicks: Number of website clicks received through the ads
7. Number of Searches: Number of users who performed searches on the website 
8. Number of View Content: Number of users who viewed content and products on the website
9. Number of Add to Cart: Number of users who added products to the cart
10. Number of Purchase: Number of purchases

Two campaigns were performed by the company:

1. Control Campaign
2. Test Campaign

**TASK :** Perform A/B testing to find the best campaign for the company to get more customers.
"""

#Importing necessary libraries
import pandas as pd
import datetime
from datetime import date, timedelta
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio
pio.templates.default = "plotly_white"

control_data = pd.read_csv("control_group.csv", sep = ";")
test_data = pd.read_csv("test_group.csv", sep = ";")

# viewing top 5 rows in control dataset
print(control_data.head())

# viewing top 5 rows in test dataset
print(test_data.head())

#Data Preparation
def to_clean(val):
    return val.strip().lower().replace("# ", "").replace("of ", "").replace(" ","_").replace("[usd]", "usd")
control_data.rename(columns=to_clean, inplace= True)
test_data.rename(columns=to_clean, inplace= True)

control_data.head()

test_data.head()

control_data.shape

test_data.shape

control_data.info()

#Checking for null values 
print(control_data.isnull().sum())

#Checking for null values 
print(test_data.isnull().sum())

#Control campaign has missing values in a row. 
#Fill in missing values by the mean value of each column

control_data["impressions"].fillna(value=control_data["impressions"].mean(), 
                                             inplace=True)
control_data["reach"].fillna(value=control_data["reach"].mean(), 
                             inplace=True)
control_data["website_clicks"].fillna(value=control_data["website_clicks"].mean(), 
                                      inplace=True)
control_data["searches"].fillna(value=control_data["searches"].mean(), 
                                         inplace=True)
control_data["view_content"].fillna(value=control_data["view_content"].mean(), 
                                      inplace=True)
control_data["add_to_cart"].fillna(value=control_data["add_to_cart"].mean(), 
                                     inplace=True)
control_data["purchase"].fillna(value=control_data["purchase"].mean(), 
                                 inplace=True)

# create a new dataset by merging both datasets
# so that one data set is placed below the other data 
ab_data = control_data.merge(test_data, how="outer").sort_values(["date"])
ab_data = ab_data.reset_index(drop=True)
print(ab_data.head())

#Check if the dataset has an equal number of samples about both campaigns
print(ab_data["campaign_name"].value_counts())

"""The dataset has 30 samples for each campaign.

**A/B Testing to Find the Best Marketing Strategy**

1. Analyze the relationship between the number of impressions we got from both campaigns and the amount spent on both campaigns
"""

figure = px.scatter(data_frame = ab_data, 
                    x="impressions",
                    y="spend_usd", 
                    size="spend_usd", 
                    color= "campaign_name", 
                    trendline="ols")
figure.show()

"""The control campaign resulted in more impressions according to the amount spent on both campaigns.

**A/B Testing to Find the Best Marketing Strategy**

2. Look at the number of searches performed on the website from both campaigns
"""

label = ["Total Searches from Control Campaign", 
         "Total Searches from Test Campaign"]
counts = [sum(control_data["searches"]), 
          sum(test_data["searches"])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Control Vs Test: Searches')
fig.update_traces(hoverinfo='label+percent', textinfo='value', 
                  textfont_size=30,
                  marker=dict(colors=colors, 
                              line=dict(color='black', width=3)))
fig.show()

"""The test campaign resulted in more searches on the website.

**A/B Testing to Find the Best Marketing Strategy**

3. Look at the number of website clicks from both campaigns
"""

label = ["Website Clicks from Control Campaign", 
         "Website Clicks from Test Campaign"]
counts = [sum(control_data["website_clicks"]), 
          sum(test_data["website_clicks"])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Control Vs Test: Website Clicks')
fig.update_traces(hoverinfo='label+percent', textinfo='value', 
                  textfont_size=30,
                  marker=dict(colors=colors, 
                              line=dict(color='black', width=3)))
fig.show()

"""The test campaign wins in the number of website clicks.

**A/B Testing to Find the Best Marketing Strategy**

4. Look at the amount of content viewed after reaching the website from both campaigns
"""

label = ["Content Viewed from Control Campaign", 
         "Content Viewed from Test Campaign"]
counts = [sum(control_data["view_content"]), 
          sum(test_data["view_content"])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Control Vs Test: Content Viewed')
fig.update_traces(hoverinfo='label+percent', textinfo='value', 
                  textfont_size=30,
                  marker=dict(colors=colors, 
                              line=dict(color='black', width=3)))
fig.show()

"""The audience of the control campaign viewed more content than the test campaign. Although there is not much difference, as the website clicks of the control campaign were low, its engagement on the website is higher than the test campaign

**A/B Testing to Find the Best Marketing Strategy**

5. Look at the number of products added to the cart from both campaigns
"""

label = ["Products Added to Cart from Control Campaign", 
         "Products Added to Cart from Test Campaign"]
counts = [sum(control_data["add_to_cart"]), 
          sum(test_data["add_to_cart"])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Control Vs Test: Added to Cart')
fig.update_traces(hoverinfo='label+percent', textinfo='value', 
                  textfont_size=30,
                  marker=dict(colors=colors, 
                              line=dict(color='black', width=3)))
fig.show()

"""Despite low website clicks more products were added to the cart from the control campaign.

**A/B Testing to Find the Best Marketing Strategy**

6. Look at the amount spent on both campaigns
"""

label = ["Amount Spent in Control Campaign", 
         "Amount Spent in Test Campaign"]
counts = [sum(control_data["spend_usd"]), 
          sum(test_data["spend_usd"])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Control Vs Test: Amount Spent')
fig.update_traces(hoverinfo='label+percent', textinfo='value', 
                  textfont_size=30,
                  marker=dict(colors=colors, 
                              line=dict(color='black', width=3)))
fig.show()

"""The amount spent on the test campaign is higher than the control campaign. But as we can see that the control campaign resulted in more content views and more products in the cart, the control campaign is more efficient than the test campaign.

**A/B Testing to Find the Best Marketing Strategy**

7. Let us look at the purchases made by both campaigns
"""

label = ["Purchases Made by Control Campaign", 
         "Purchases Made by Test Campaign"]
counts = [sum(control_data["purchase"]), 
          sum(test_data["purchase"])]
colors = ['gold','lightgreen']
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Control Vs Test: Purchases')
fig.update_traces(hoverinfo='label+percent', textinfo='value', 
                  textfont_size=30,
                  marker=dict(colors=colors, 
                              line=dict(color='black', width=3)))
fig.show()

"""There’s only a difference of around 1% in the purchases made from both ad campaigns. As the Control campaign resulted in more sales in less amount spent on marketing, the control campaign wins here!

**Now let’s analyze some metrics to find which ad campaign converts more.**
"""

#Analyze relationship between the number of website clicks and content viewed from both campaigns
figure = px.scatter(data_frame = ab_data, 
                    x="view_content",
                    y="website_clicks", 
                    size="website_clicks", 
                    color= "campaign_name", 
                    trendline="ols")
figure.show()

"""The website clicks are higher in the test campaign, but the engagement from website clicks is higher in the control campaign. So the control campaign wins!"""

#Analyze the relationship between the amount of content viewed and the number of products added to the cart from both campaigns
figure = px.scatter(data_frame = ab_data, 
                    x="add_to_cart",
                    y="view_content", 
                    size="add_to_cart", 
                    color= "campaign_name", 
                    trendline="ols")
figure.show()

"""Again, the control campaign wins! """

# Analyze the relationship between the number of products added to the cart and the number of sales from both campaigns
figure = px.scatter(data_frame = ab_data, 
                    x="purchase",
                    y="add_to_cart", 
                    size="purchase", 
                    color= "campaign_name", 
                    trendline="ols")
figure.show()

"""Although the control campaign resulted in more sales and more products in the cart, the conversation rate of the test campaign is higher.

**Conclusion**

From the above A/B tests, it can be found that the control campaign resulted in more sales and engagement from the visitors. More products were viewed from the control campaign, resulting in more products in the cart and more sales. But the conversation rate of products in the cart is higher in the test campaign. The test campaign resulted in more sales according to the products viewed and added to the cart. And the control campaign results in more sales overall. So, the Test campaign can be used to market a specific product to a specific audience, and the Control campaign can be used to market multiple products to a wider audience.
"""